---
# MongoDB ConfigMap for configuration settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: storage
  labels:
    app: mongodb
    tier: database
data:
  mongod.conf: |
    storage:
      engine: wiredTiger
      wiredTiger:
        engineConfig:
          cacheSizeGB: 4
          journalCompressor: snappy
          directoryForIndexes: true
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true
    replication:
      replSetName: rs0
      enableMajorityReadConcern: true
      oplogSizeMB: 51200
      secondaryIndexPrefetch: all
    sharding:
      clusterRole: shardsvr
    security:
      authorization: enabled
      clusterAuthMode: x509
      enableEncryption: true
    systemLog:
      destination: file
      path: /var/log/mongodb/mongod.log
      logAppend: true
    auditLog:
      destination: file
      format: JSON
      path: /var/log/mongodb/audit.log
---
# MongoDB Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: storage
  labels:
    app: mongodb
    tier: database
spec:
  clusterIP: None
  ports:
    - port: 27017
      targetPort: 27017
      protocol: TCP
      name: mongodb
  selector:
    app: mongodb
---
# MongoDB StatefulSet for database pods
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: storage
  labels:
    app: mongodb
    tier: database
spec:
  serviceName: mongodb
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: mongodb
        tier: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: mongodb
          image: mongodb:6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
              protocol: TCP
          resources:
            requests:
              cpu: "2"
              memory: "8Gi"
            limits:
              cpu: "4"
              memory: "16Gi"
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: mongodb-config
              mountPath: /etc/mongod.conf
              subPath: mongod.conf
            - name: mongodb-keyfile
              mountPath: /etc/mongodb/keyfile
              subPath: keyfile
            - name: mongodb-encryption
              mountPath: /etc/mongodb/encryption-key
              subPath: encryption-key
            - name: mongodb-logs
              mountPath: /var/log/mongodb
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('replSetGetStatus')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
        - name: mongodb-exporter
          image: mongodb-exporter:0.40.0
          ports:
            - containerPort: 9216
              name: metrics
          resources:
            requests:
              cpu: "200m"
              memory: "200Mi"
            limits:
              cpu: "500m"
              memory: "500Mi"
  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp2
        resources:
          requests:
            storage: 500Gi
---
# MongoDB ServiceMonitor for Prometheus integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mongodb-metrics
  namespace: storage
  labels:
    app: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  endpoints:
    - port: metrics
      interval: 30s
      scrapeTimeout: 10s
---
# MongoDB PodDisruptionBudget for availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mongodb-pdb
  namespace: storage
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mongodb
---
# MongoDB PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: mongodb-alerts
  namespace: storage
  labels:
    app: mongodb
spec:
  groups:
    - name: mongodb
      rules:
        - alert: MongoDBReplicationLag
          expr: mongodb_replset_member_optime_date{state="SECONDARY"} - on(set) group_right mongodb_replset_member_optime_date{state="PRIMARY"} > 10
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: MongoDB replication lag detected
        - alert: MongoDBHighConnectionUtilization
          expr: mongodb_connections{state="current"} / mongodb_connections{state="available"} * 100 > 80
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: MongoDB connection utilization high
        - alert: MongoDBLowDiskSpace
          expr: (mongodb_disk_used / mongodb_disk_total) * 100 > 85
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: MongoDB disk space utilization high