---
# Redis Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: storage
  labels:
    name: storage
    component: redis

---
# Redis ConfigMap for cluster configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: storage
data:
  redis.conf: |
    cluster-enabled yes
    cluster-node-timeout 5000
    cluster-replica-validity-factor 10
    maxmemory 4gb
    maxmemory-policy allkeys-lru
    maxclients 10000
    tcp-keepalive 300
    timeout 0
    tls-port 6379
    port 0
    tls-cert-file /etc/redis/tls/tls.crt
    tls-key-file /etc/redis/tls/tls.key
    tls-ca-cert-file /etc/redis/tls/ca.crt
    tls-auth-clients optional
    tls-protocols "TLSv1.2"

---
# Redis Secret for authentication
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: storage
type: Opaque
data:
  redis-password: ${REDIS_PASSWORD}  # Base64 encoded password to be provided

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: storage
  labels:
    app: redis
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  clusterIP: None
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
    - port: 16379
      targetPort: 16379
      name: gossip
    - port: 9121
      targetPort: 9121
      name: metrics
  selector:
    app: redis

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: storage
spec:
  serviceName: redis
  replicas: 6
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis
              topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        image: redis:7.0
        command: ["redis-server", "/etc/redis/redis.conf"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: gossip
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        - name: redis-tls
          mountPath: /etc/redis/tls
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["redis-cli", "--tls", "--cert", "/etc/redis/tls/tls.crt", "--key", "/etc/redis/tls/tls.key", "--cacert", "/etc/redis/tls/ca.crt", "-a", "$(REDIS_PASSWORD)", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 9121
          name: metrics
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
          limits:
            cpu: "200m"
            memory: "200Mi"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-tls
        secret:
          secretName: redis-tls
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp2
      resources:
        requests:
          storage: 20Gi

---
# Redis ServiceMonitor for Prometheus integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-metrics
  namespace: storage
spec:
  selector:
    matchLabels:
      app: redis
  endpoints:
  - port: metrics
    interval: 30s
    scrapeTimeout: 10s

---
# Redis NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: storage
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: app-namespace
    ports:
    - protocol: TCP
      port: 6379
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9121

---
# Redis PrometheusRule for alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: redis-alerts
  namespace: storage
spec:
  groups:
  - name: redis.rules
    rules:
    - alert: RedisMemoryHigh
      expr: redis_memory_used_bytes / redis_memory_max_bytes * 100 > 80
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: Redis memory usage high
    - alert: RedisConnectionHigh
      expr: redis_connected_clients > 8000
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: Redis connection count high
    - alert: RedisReplicationLag
      expr: redis_replication_lag > 10
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: Redis replication lag high