---
# PostgreSQL ConfigMap for database configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: default
  labels:
    app: postgresql
    tier: storage
data:
  # Database configuration
  POSTGRES_DB: campaigns
  POSTGRES_HOST: ${RDS_ENDPOINT}
  POSTGRES_PORT: "5432"
  
  # Performance tuning parameters
  MAX_CONNECTIONS: "1000"
  SHARED_BUFFERS: "1GB"
  EFFECTIVE_CACHE_SIZE: "3GB"
  MAINTENANCE_WORK_MEM: "256MB"
  CHECKPOINT_COMPLETION_TARGET: "0.9"
  WAL_BUFFERS: "16MB"
  DEFAULT_STATISTICS_TARGET: "100"
  RANDOM_PAGE_COST: "1.1"
  EFFECTIVE_IO_CONCURRENCY: "200"
  WORK_MEM: "16MB"
  MIN_WAL_SIZE: "1GB"
  MAX_WAL_SIZE: "4GB"

---
# PostgreSQL Secret for sensitive credentials
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-credentials
  namespace: default
  labels:
    app: postgresql
    tier: storage
type: Opaque
data:
  POSTGRES_USER: ${BASE64_ENCODED_USER}
  POSTGRES_PASSWORD: ${BASE64_ENCODED_PASSWORD}

---
# PostgreSQL StatefulSet for database pods
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: default
  labels:
    app: postgresql
    tier: storage
spec:
  serviceName: postgresql
  replicas: 2
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        tier: storage
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15.4
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
        - containerPort: 9187
          name: metrics
        envFrom:
        - configMapRef:
            name: postgresql-config
        - secretRef:
            name: postgresql-credentials
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: postgresql
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Service for database access
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: default
  labels:
    app: postgresql
    tier: storage
spec:
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app: postgresql
  type: ClusterIP

---
# PostgreSQL Monitoring Service for Prometheus metrics
apiVersion: v1
kind: Service
metadata:
  name: postgresql-metrics
  namespace: default
  labels:
    app: postgresql
    tier: storage
spec:
  ports:
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  selector:
    app: postgresql
  type: ClusterIP