apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-service
  namespace: default
  labels:
    app: ml-service
    component: scoring
    tier: backend
  annotations:
    kubernetes.io/change-cause: "Initial deployment of ML service"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ml-service
  template:
    metadata:
      labels:
        app: ml-service
        component: scoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ml-service
              topologyKey: kubernetes.io/hostname
      containers:
      - name: ml-service
        image: ml-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          protocol: TCP
          name: http
        resources:
          requests:
            cpu: "1000m"
            memory: "2Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        env:
        - name: PYTHONPATH
          value: /app/src
        - name: MODEL_CONFIG_PATH
          value: /app/config/model_config.yaml
        - name: LOG_LEVEL
          value: INFO
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: model-config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: model-config
        configMap:
          name: ml-service-config
      - name: tmp
        emptyDir: {}
      securityContext:
        fsGroup: 1000
      serviceAccountName: ml-service