name: Backend CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  COVERAGE_THRESHOLD: 80

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=${{ hashFiles('src/backend/**/package-lock.json') }}" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        service: [lead-service, campaign-service, validation-service, ml-service, rtb-service]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/**/package-lock.json'

      - name: Setup Python
        if: matrix.service == 'ml-service'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Go
        if: matrix.service == 'rtb-service'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.service }}-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.service }}-

      - name: Install dependencies
        run: |
          cd src/backend/services/${{ matrix.service }}
          npm ci
          
      - name: Type check
        run: |
          cd src/backend/services/${{ matrix.service }}
          npm run type-check

      - name: Lint
        run: |
          cd src/backend/services/${{ matrix.service }}
          npm run lint
          
      - name: Run unit tests
        run: |
          cd src/backend/services/${{ matrix.service }}
          npm run test:coverage
        env:
          CI: true

      - name: Check test coverage
        run: |
          cd src/backend/services/${{ matrix.service }}
          COVERAGE=$(npm run test:coverage | grep -o '[0-9.]*%' | head -1 | cut -d'%' -f1)
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below threshold ($COVERAGE_THRESHOLD%)"
            exit 1
          fi

      - name: Build service
        run: |
          cd src/backend/services/${{ matrix.service }}
          npm run build

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.service }}
          path: src/backend/services/${{ matrix.service }}/coverage
          retention-days: 14

  security-scan:
    name: Security Scanning
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run SonarQube analysis
        uses: SonarSource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-containers:
    name: Build and Push Containers
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        service: [lead-service, campaign-service, validation-service, ml-service, rtb-service]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: src/backend/services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-${{ matrix.service }}'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:${{ steps.meta.outputs.version }}
          format: spdx
          output-file: sbom.spdx

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.service }}
          path: sbom.spdx
          retention-days: 90

  notify:
    name: Send Notifications
    needs: [build-containers]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}