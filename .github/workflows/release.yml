name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version number'
        required: true
        type: string
        pattern: '^v\d+\.\d+\.\d+$'
      skip_tests:
        description: 'Skip non-critical tests'
        required: false
        type: boolean
        default: false

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  AWS_REGION: us-east-1
  NODE_VERSION: '20.x'
  COVERAGE_THRESHOLD: 80

permissions:
  contents: write
  packages: write
  id-token: write
  security-events: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "value=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "value=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          if ! [[ "${{ steps.version.outputs.value }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must match v*.*.* (e.g., v1.0.0)"
            exit 1
          fi

  build:
    name: Build and Test
    needs: validate
    uses: ./.github/workflows/backend-ci.yml
    with:
      version: ${{ needs.validate.outputs.version }}
    secrets: inherit

  frontend:
    name: Frontend Build
    needs: validate
    uses: ./.github/workflows/frontend-ci.yml
    with:
      version: ${{ needs.validate.outputs.version }}
    secrets: inherit

  infrastructure:
    name: Infrastructure Validation
    needs: validate
    uses: ./.github/workflows/infrastructure-ci.yml
    with:
      version: ${{ needs.validate.outputs.version }}
    secrets: inherit

  security:
    name: Security Scan
    needs: [build, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  prepare-release:
    name: Prepare Release
    needs: [validate, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: ${{ needs.validate.outputs.version }}
          config-name: release-drafter.yml

      - name: Create release draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          draft: true
          prerelease: false
          body_path: CHANGELOG.md

  deploy-staging:
    name: Deploy to Staging
    needs: [prepare-release, infrastructure]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.insurance-platform.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Staging deployment steps would go here
          echo "Deploying version ${{ needs.validate.outputs.version }} to staging"

  production-approval:
    name: Production Approval
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Await approval
        run: echo "Production deployment approved"

  deploy-production:
    name: Deploy to Production
    needs: production-approval
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.insurance-platform.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to production
        run: |
          # Production deployment steps would go here
          echo "Deploying version ${{ needs.validate.outputs.version }} to production"

      - name: Verify deployment
        run: |
          # Health check and verification steps would go here
          echo "Verifying production deployment"

  notify:
    name: Send Notifications
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}