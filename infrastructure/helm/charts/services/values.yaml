# Helm values configuration for Multi-Vertical Insurance Lead Generation Platform
# Version: 1.0.0
# Kubernetes Version: 1.27+

global:
  environment: prod
  
  image:
    registry: "registry.example.com"
    pullPolicy: IfNotPresent
    tag: "latest"

  monitoring:
    enabled: true
    prometheus:
      scrape: true
      path: /metrics
      port: 9090
      interval: 15s
      timeout: 10s
    jaeger:
      enabled: true
      endpoint: "http://jaeger-collector:14268/api/traces"
      samplingRate: 0.1
      maxTracesPerSecond: 100
    logging:
      level: info
      format: json
      retention: 30d

  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

  security:
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
    networkPolicy:
      enabled: true
      ingressRules:
        - from:
            - namespaceSelector:
                matchLabels:
                  name: ingress-nginx
      egressRules:
        - to:
            - namespaceSelector:
                matchLabels:
                  name: monitoring

  availability:
    podAntiAffinity: true
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: lead-service
    priorityClass: high-priority

services:
  lead:
    name: lead-service
    replicaCount: 3
    
    image:
      repository: "registry.example.com/lead-service"
      tag: "1.0.0"
    
    service:
      type: ClusterIP
      port: 8080
      targetPort: 8080
    
    resources:
      requests:
        cpu: 1000m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 2Gi
    
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilization: 70
      targetMemoryUtilization: 80
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
          policies:
            - type: Pods
              value: 2
              periodSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 120
    
    config:
      mongodb:
        uri: "mongodb://mongodb-service:27017/leads"
        maxPoolSize: 100
        retryWrites: true
      redis:
        url: "redis://redis-service:6379"
        maxClients: 50
        timeout: 5000
      logLevel: info
    
    probes:
      liveness:
        path: /health/live
        initialDelaySeconds: 30
        periodSeconds: 10
      readiness:
        path: /health/ready
        initialDelaySeconds: 20
        periodSeconds: 5

  validation:
    name: validation-service
    replicaCount: 3
    
    image:
      repository: "registry.example.com/validation-service"
      tag: "1.0.0"
    
    service:
      type: ClusterIP
      port: 8081
      targetPort: 8081
    
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 1Gi
    
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 8
      targetCPUUtilization: 75
      targetMemoryUtilization: 80
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
          policies:
            - type: Pods
              value: 1
              periodSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 120
    
    config:
      redis:
        url: "redis://redis-service:6379"
        maxClients: 30
        timeout: 3000
      logLevel: info
    
    probes:
      liveness:
        path: /health/live
        initialDelaySeconds: 20
        periodSeconds: 10
      readiness:
        path: /health/ready
        initialDelaySeconds: 15
        periodSeconds: 5

  ml:
    name: ml-service
    replicaCount: 2
    
    image:
      repository: "registry.example.com/ml-service"
      tag: "1.0.0"
    
    service:
      type: ClusterIP
      port: 8082
      targetPort: 8082
    
    resources:
      requests:
        cpu: 2000m
        memory: 4Gi
      limits:
        cpu: 4000m
        memory: 8Gi
    
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      targetCPUUtilization: 80
      targetMemoryUtilization: 85
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 120
          policies:
            - type: Pods
              value: 1
              periodSeconds: 120
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 300
    
    config:
      modelPath: "/models"
      batchSize: 32
      inferenceTimeout: 100
      logLevel: info
    
    probes:
      liveness:
        path: /health/live
        initialDelaySeconds: 60
        periodSeconds: 20
      readiness:
        path: /health/ready
        initialDelaySeconds: 45
        periodSeconds: 15

  rtb:
    name: rtb-service
    replicaCount: 4
    
    image:
      repository: "registry.example.com/rtb-service"
      tag: "1.0.0"
    
    service:
      type: ClusterIP
      port: 8083
      targetPort: 8083
    
    resources:
      requests:
        cpu: 1500m
        memory: 2Gi
      limits:
        cpu: 3000m
        memory: 4Gi
    
    autoscaling:
      enabled: true
      minReplicas: 4
      maxReplicas: 12
      targetCPUUtilization: 65
      targetMemoryUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 30
          policies:
            - type: Pods
              value: 2
              periodSeconds: 30
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
            - type: Pods
              value: 1
              periodSeconds: 60
    
    config:
      bidTimeout: 100
      maxBidders: 20
      redis:
        url: "redis://redis-service:6379"
        maxClients: 100
        timeout: 2000
      logLevel: info
    
    probes:
      liveness:
        path: /health/live
        initialDelaySeconds: 15
        periodSeconds: 5
      readiness:
        path: /health/ready
        initialDelaySeconds: 10
        periodSeconds: 3